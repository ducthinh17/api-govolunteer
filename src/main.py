import time
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from scraper import scrape_news as fetch_news_from_source
from scraper import scrape_article_content as fetch_article_from_source
from scraper import BASE_URL

app = FastAPI(title="GoVolunteer Scraper API", version="5.0.0")
app.add_middleware(CORSMiddleware, allow_origins=["*"], allow_credentials=True, allow_methods=["GET"], allow_headers=["*"])

cache = { "news_data": None, "last_fetched": 0 }
CACHE_DURATION_SECONDS = 1800

@app.get("/", summary="Ki·ªÉm tra tr·∫°ng th√°i API")
def read_root():
    return {"status": "online", "message": "API GoVolunteer ƒë√£ s·∫µn s√†ng!"}

@app.get("/news", summary="L·∫•y danh s√°ch t·∫•t c·∫£ tin t·ª©c")
def get_all_news():
    current_time = time.time()
    if cache["news_data"] and (current_time - cache["last_fetched"] < CACHE_DURATION_SECONDS):
        print("‚úÖ Tr·∫£ v·ªÅ d·ªØ li·ªáu t·ª´ cache.")
        return cache["news_data"]
    
    print("‚ôªÔ∏è Cache h·∫øt h·∫°n. B·∫Øt ƒë·∫ßu scrape d·ªØ li·ªáu m·ªõi...")
    data = fetch_news_from_source()
    if not data:
        raise HTTPException(status_code=503, detail="Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ trang ch·ªß GoVolunteer. Server c√≥ th·ªÉ ƒëang b·∫≠n ho·∫∑c trang web kh√¥ng ph·∫£n h·ªìi.")
    
    cache["news_data"] = data
    cache["last_fetched"] = current_time
    print("üíæ ƒê√£ c·∫≠p nh·∫≠t cache.")
    return data

@app.get("/article", summary="L·∫•y n·ªôi dung chi ti·∫øt c·ªßa m·ªôt b√†i vi·∫øt")
def get_article_detail(url: str):
    if not url or not url.startswith(BASE_URL):
        raise HTTPException(status_code=400, detail=f"URL kh√¥ng h·ª£p l·ªá.")
    
    content = fetch_article_from_source(url)
    if content is None:
        raise HTTPException(status_code=503, detail="Server ƒë√£ g·∫∑p l·ªói khi c·ªë g·∫Øng l·∫•y n·ªôi dung b√†i vi·∫øt. Vui l√≤ng ki·ªÉm tra log tr√™n Render.")
        
    return {"html_content": content}
