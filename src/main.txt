import time
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel

from scraper import scrape_news as fetch_news_from_source
from scraper import scrape_article_with_requests as fetch_article_from_source
from scraper import (
    scrape_chuong_trinh_chien_dich_du_an,
    scrape_skills,
    scrape_ideas,
    scrape_clubs,
    BASE_URL
)
from src.sheets_lookup import find_volunteer_info

app = FastAPI(title="GoVolunteer Scraper & Lookup API", version="8.0.0") # TƒÉng phi√™n b·∫£n
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["GET", "POST"], # Th√™m POST ƒë·ªÉ cho ph√©p endpoint lookup
    allow_headers=["*"],
)

# --- MODEL CHO D·ªÆ LI·ªÜU ƒê·∫¶U V√ÄO C·ª¶A ENDPOINT M·ªöI ---
class LookupRequest(BaseModel):
    fullName: str
    citizenId: str

# --- H·ªÜ TH·ªêNG CACHE (GI·ªÆ NGUY√äN) ---
cache = {"news_data": None, "last_fetched": 0}
CACHE_DURATION_SECONDS = 1800  # Cache trong 30 ph√∫t

# --- C√ÅC ENDPOINTS C≈® (GI·ªÆ NGUY√äN) ---
@app.get("/", summary="Ki·ªÉm tra tr·∫°ng th√°i API")
def read_root():
    """Cung c·∫•p tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa API."""
    return {"status": "online", "message": "API GoVolunteer (Optimized Version) ƒë√£ s·∫µn s√†ng!"}

@app.get("/news", summary="L·∫•y danh s√°ch t·∫•t c·∫£ tin t·ª©c")
def get_all_news():
    """L·∫•y danh s√°ch tin t·ª©c theo danh m·ª•c t·ª´ trang /news. D·ªØ li·ªáu ƒë∆∞·ª£c cache trong 30 ph√∫t."""
    current_time = time.time()
    if cache["news_data"] and (current_time - cache["last_fetched"] < CACHE_DURATION_SECONDS):
        print("‚úÖ Tr·∫£ v·ªÅ d·ªØ li·ªáu /news t·ª´ cache.")
        return cache["news_data"]

    print("‚ôªÔ∏è Cache /news h·∫øt h·∫°n. B·∫Øt ƒë·∫ßu scrape d·ªØ li·ªáu m·ªõi...")
    data = fetch_news_from_source()
    if not data:
        raise HTTPException(
            status_code=503,
            detail="Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ trang ch·ªß GoVolunteer. Trang web c√≥ th·ªÉ ƒëang b·∫≠n ho·∫∑c kh√¥ng ph·∫£n h·ªìi."
        )

    cache["news_data"] = data
    cache["last_fetched"] = current_time
    print("üíæ ƒê√£ c·∫≠p nh·∫≠t cache /news.")
    return data

@app.get("/clubs", summary="L·∫•y danh s√°ch c√°c CLB, ƒê·ªôi, Nh√≥m")
def get_clubs():
    """L·∫•y danh s√°ch c√°c CLB, ƒë·ªôi, nh√≥m ƒë∆∞·ª£c ph√¢n lo·∫°i t·ª´ trang /clubs."""
    data = scrape_clubs()
    if not data:
        raise HTTPException(
            status_code=503,
            detail="Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu CLB. Trang web c√≥ th·ªÉ ƒëang b·∫≠n ho·∫∑c kh√¥ng ph·∫£n h·ªìi."
        )
    return data

@app.get("/chuong-trinh-chien-dich-du-an", summary="L·∫•y danh s√°ch c√°c ch∆∞∆°ng tr√¨nh, chi·∫øn d·ªãch, d·ª± √°n")
def get_campaigns():
    """L·∫•y danh s√°ch c√°c ch∆∞∆°ng tr√¨nh, chi·∫øn d·ªãch, d·ª± √°n ƒë∆∞·ª£c ph√¢n lo·∫°i."""
    data = scrape_chuong_trinh_chien_dich_du_an()
    if not data:
        raise HTTPException(
            status_code=503,
            detail="Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu ch∆∞∆°ng tr√¨nh, chi·∫øn d·ªãch, d·ª± √°n. Trang web c√≥ th·ªÉ ƒëang b·∫≠n ho·∫∑c kh√¥ng ph·∫£n h·ªìi."
        )
    return data

@app.get("/skills", summary="L·∫•y danh s√°ch c√°c b√†i vi·∫øt k·ªπ nƒÉng")
def get_skills():
    """L·∫•y danh s√°ch c√°c b√†i vi·∫øt k·ªπ nƒÉng ƒë∆∞·ª£c ph√¢n lo·∫°i."""
    data = scrape_skills()
    if not data:
        raise HTTPException(
            status_code=503,
            detail="Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu k·ªπ nƒÉng. Trang web c√≥ th·ªÉ ƒëang b·∫≠n ho·∫∑c kh√¥ng ph·∫£n h·ªìi."
        )
    return data

@app.get("/ideas", summary="L·∫•y danh s√°ch c√°c √Ω t∆∞·ªüng t√¨nh nguy·ªán")
def get_ideas():
    """L·∫•y danh s√°ch c√°c √Ω t∆∞·ªüng t√¨nh nguy·ªán ƒë∆∞·ª£c ph√¢n lo·∫°i."""
    data = scrape_ideas()
    if not data:
        raise HTTPException(
            status_code=503,
            detail="Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu √Ω t∆∞·ªüng. Trang web c√≥ th·ªÉ ƒëang b·∫≠n ho·∫∑c kh√¥ng ph·∫£n h·ªìi."
        )
    return data

@app.get("/article", summary="L·∫•y n·ªôi dung chi ti·∫øt c·ªßa m·ªôt b√†i vi·∫øt")
def get_article_detail(url: str):
    """L·∫•y n·ªôi dung HTML c·ªßa m·ªôt b√†i vi·∫øt c·ª• th·ªÉ d·ª±a tr√™n URL."""
    if not url or not url.startswith(BASE_URL):
        raise HTTPException(status_code=400, detail=f"URL kh√¥ng h·ª£p l·ªá. Ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng {BASE_URL}")

    content = fetch_article_from_source(url)
    if content is None:
        raise HTTPException(
            status_code=503,
            detail="Kh√¥ng th·ªÉ l·∫•y n·ªôi dung b√†i vi·∫øt. Trang ngu·ªìn c√≥ th·ªÉ ƒë√£ thay ƒë·ªïi c·∫•u tr√∫c ho·∫∑c kh√¥ng ph·∫£n h·ªìi."
        )

    return {"html_content": content}

@app.post("/lookup", summary="Tra c·ª©u T√¨nh nguy·ªán vi√™n t·ª´ Google Sheets")
def lookup_volunteer(request: LookupRequest):
    """
    Nh·∫≠n H·ªç t√™n v√† CCCD, sau ƒë√≥ t√¨m ki·∫øm th√¥ng tin t∆∞∆°ng ·ª©ng 
    trong c√°c Google Sheets ƒë√£ ƒëƒÉng k√Ω (Ho·∫°t ƒë·ªông v√† Ch·ª©ng nh·∫≠n).
    """
    results = find_volunteer_info(request.fullName, request.citizenId)
    
    activity_info = results.get('activity')
    certificate_info = results.get('certificate')

    if (isinstance(activity_info, dict) and 'error' in activity_info) or \
       (isinstance(certificate_info, dict) and 'error' in certificate_info):
        # In l·ªói ra console c·ªßa server ƒë·ªÉ debug
        print("L·ªñI KHI TRA C·ª®U:", results)
        raise HTTPException(
            status_code=503, # Service Unavailable
            detail="Kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu do l·ªói t·ª´ d·ªãch v·ª• Google Sheets."
        )

    if not activity_info and not certificate_info:
        raise HTTPException(
            status_code=404, # Not Found
            detail="Kh√¥ng t√¨m th·∫•y th√¥ng tin t√¨nh nguy·ªán vi√™n ph√π h·ª£p."
        )
    
    return results