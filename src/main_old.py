import time
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware

# --- C·∫¨P NH·∫¨T D√íNG IMPORT ---
# Gi·ªù ƒë√¢y ch√∫ng ta nh·∫≠p c·∫£ hai h√†m t·ª´ scraper v√† ƒë·ªïi t√™n ch√∫ng cho nh·∫•t qu√°n
from scraper import scrape_news as fetch_news_from_source
from scraper import scrape_article_with_requests as fetch_article_from_source
from scraper import scrape_chuong_trinh_chien_dich_du_an
from scraper import scrape_skills
from scraper import scrape_ideas
from scraper import BASE_URL

# --- KH·ªûI T·∫†O APP V√Ä C·∫§U H√åNH (GI·ªÆ NGUY√äN) ---
app = FastAPI(title="GoVolunteer Scraper API", version="6.0.0") # TƒÉng phi√™n b·∫£n
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["GET"],
    allow_headers=["*"],
)

# --- H·ªÜ TH·ªêNG CACHE (GI·ªÆ NGUY√äN) ---
cache = {"news_data": None, "last_fetched": 0}
CACHE_DURATION_SECONDS = 1800  # Cache trong 30 ph√∫t

# --- C√ÅC ENDPOINTS ---
@app.get("/", summary="Ki·ªÉm tra tr·∫°ng th√°i API")
def read_root():
    """Cung c·∫•p tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa API."""
    return {"status": "online", "message": "API GoVolunteer (Optimized Version) ƒë√£ s·∫µn s√†ng!"}

@app.get("/news", summary="L·∫•y danh s√°ch t·∫•t c·∫£ tin t·ª©c")
def get_all_news():
    """L·∫•y danh s√°ch tin t·ª©c theo danh m·ª•c t·ª´ trang ch·ªß. D·ªØ li·ªáu ƒë∆∞·ª£c cache trong 30 ph√∫t."""
    current_time = time.time()
    if cache["news_data"] and (current_time - cache["last_fetched"] < CACHE_DURATION_SECONDS):
        print("‚úÖ Tr·∫£ v·ªÅ d·ªØ li·ªáu /news t·ª´ cache.")
        return cache["news_data"]

    print("‚ôªÔ∏è Cache /news h·∫øt h·∫°n. B·∫Øt ƒë·∫ßu scrape d·ªØ li·ªáu m·ªõi...")
    data = fetch_news_from_source()
    if not data:
        raise HTTPException(
            status_code=503,
            detail="Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ trang ch·ªß GoVolunteer. Trang web c√≥ th·ªÉ ƒëang b·∫≠n ho·∫∑c kh√¥ng ph·∫£n h·ªìi."
        )

    cache["news_data"] = data
    cache["last_fetched"] = current_time
    print("üíæ ƒê√£ c·∫≠p nh·∫≠t cache /news.")
    return data

@app.get("/chuong-trinh-chien-dich-du-an", summary="L·∫•y danh s√°ch c√°c ch∆∞∆°ng tr√¨nh chi·∫øn d·ªãch d·ª± √°n")
def get_campaigns():
    """L·∫•y danh s√°ch c√°c ch∆∞∆°ng tr√¨nh chi·∫øn d·ªãch d·ª± √°n t·ª´ trang ch·ªß."""
    data = scrape_chuong_trinh_chien_dich_du_an()
    if not data:
        raise HTTPException(
            status_code=503,
            detail="Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu ch∆∞∆°ng tr√¨nh chi·∫øn d·ªãch d·ª± √°n. Trang web c√≥ th·ªÉ ƒëang b·∫≠n ho·∫∑c kh√¥ng ph·∫£n h·ªìi."
        )
    return data


@app.get("/skills", summary="L·∫•y danh s√°ch c√°c k·ªπ nƒÉng")
def get_skills():
    """L·∫•y danh s√°ch c√°c k·ªπ nƒÉng t·ª´ trang ch·ªß."""
    data = scrape_skills()
    if not data:
        raise HTTPException(
            status_code=503,
            detail="Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu k·ªπ nƒÉng. Trang web c√≥ th·ªÉ ƒëang b·∫≠n ho·∫∑c kh√¥ng ph·∫£n h·ªìi."
        )
    return data


@app.get("/ideas", summary="L·∫•y danh s√°ch c√°c √Ω t∆∞·ªüng")
def get_ideas():
    """L·∫•y danh s√°ch c√°c √Ω t∆∞·ªüng t·ª´ trang ch·ªß."""
    data = scrape_ideas()
    if not data:
        raise HTTPException(
            status_code=503,
            detail="Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu √Ω t∆∞·ªüng. Trang web c√≥ th·ªÉ ƒëang b·∫≠n ho·∫∑c kh√¥ng ph·∫£n h·ªìi."
        )
    return data

@app.get("/article", summary="L·∫•y n·ªôi dung chi ti·∫øt c·ªßa m·ªôt b√†i vi·∫øt")
def get_article_detail(url: str):
    """L·∫•y n·ªôi dung HTML c·ªßa m·ªôt b√†i vi·∫øt c·ª• th·ªÉ d·ª±a tr√™n URL."""
    if not url or not url.startswith(BASE_URL):
        raise HTTPException(status_code=400, detail=f"URL kh√¥ng h·ª£p l·ªá. Ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng {BASE_URL}")

    # B√¢y gi·ªù h√†m n√†y s·∫Ω g·ªçi phi√™n b·∫£n d√πng `requests`, nhanh v√† ƒë√°ng tin c·∫≠y h∆°n
    content = fetch_article_from_source(url)

    if content is None:
        raise HTTPException(
            status_code=503,
            detail="Kh√¥ng th·ªÉ l·∫•y n·ªôi dung b√†i vi·∫øt. Trang ngu·ªìn c√≥ th·ªÉ ƒë√£ thay ƒë·ªïi c·∫•u tr√∫c ho·∫∑c kh√¥ng ph·∫£n h·ªìi."
        )

    return {"html_content": content}
